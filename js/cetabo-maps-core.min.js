Array.prototype.has=function(v){for(var i=0;i<this.length;i++){if(this[i]===v){return true}}return false};Array.prototype.removeByPosition=function(from,to){if(from===undefined||to===undefined){return this}var rest=this.slice((to||from)+1||this.length);this.length=from<0?this.length+from:from;return this.push.apply(this,rest)};Array.prototype.removeByContent=function(content){for(var i=0;i<this.length;i++){if(this[i]===content){this.removeByPosition(i,i)}}};String.prototype.replaceAll=function(find,replace){var str=this;str=str.replace(new RegExp(find,"g"),replace);return str};String.prototype.trim=function trim(str,chars){return this.rtrim(chars).ltrim(chars)};String.prototype.ltrim=function(chars){var str=this;chars=chars||"\\s";return str.replace(new RegExp("^["+chars+"]+","g"),"")};String.prototype.rtrim=function(chars){var str=this;chars=chars||"\\s";return str.replace(new RegExp("["+chars+"]+$","g"),"")};String.prototype.isEmpty=function(){return this===undefined||this===null||this.trim()===""};var EventDistpatcher={channels:[],use:function(identifier){if(this.channels[identifier]===undefined){this.channels[identifier]=_.extend({},Backbone.Events)}return this.channels[identifier]}};var BaseManager=Backbone.Model.extend({});var ConnectionManager=BaseManager.extend({constructor:function(config){var channel=config.channel;EventDistpatcher.use(channel).on("backend.send",this.send,this);this.config=config},send:function(message){var options=message.callback;var url=message.url;jQuery.ajax({url:message.url,type:"POST",dataType:"json",data:message.content,success:function(object,status){if(options!==undefined&&options.success){options.success(object)}},error:function(xhr,status,error){if(options!==undefined&&options.error){options.error(error)}}})}});var MapManager=BaseManager.extend({state:{markers:{},infowindows:{}},initialize:function(config){this.initMap(config.canvas);var channel=this.get("channel");EventDistpatcher.use(channel).on("map.updatecenter",this.onChangeMapPosition,this);EventDistpatcher.use(channel).on("map.updatezoom",this.onChangeMapZoom,this);EventDistpatcher.use(channel).on("map.updatetype",this.onChangeMapType,this);EventDistpatcher.use(channel).on("place.add",this.onAddPlaces,this);EventDistpatcher.use(channel).on("place.remove",this.onRemovePlace,this);EventDistpatcher.use(channel).on("place.update",this.onUpdatePlace,this);EventDistpatcher.use(channel).on("styler.update",this.onUpdateStyle,this);EventDistpatcher.use(channel).on("map.updatesize",this.onUpdateSize,this)},initMap:function(mapCanvas){var channel=this.get("channel");var mapOptions={zoom:3,center:new google.maps.LatLng(39.5312,-102.6502),panControl:true,zoomControl:true,scaleControl:true,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,"map_style"]}};this.map=new google.maps.Map(document.getElementById(mapCanvas),mapOptions);EventDistpatcher.use(channel).trigger("map.updatecenter",this.map.getCenter().lat(),this.map.getCenter().lng());google.maps.event.addListener(this.map,"dragend",function(){EventDistpatcher.use(channel).trigger("map.updatecenter",this.getCenter().lat(),this.getCenter().lng())});google.maps.event.addListener(this.map,"zoom_changed",function(){EventDistpatcher.use(channel).trigger("map.updatezoom",this.getZoom())})},onChangeMapPosition:function(lat,lng){if(lat===undefined||lng===undefined){return}this.map.setCenter(new google.maps.LatLng(lat,lng))},onChangeMapType:function(type){this.map.setMapTypeId(type)},onChangeMapZoom:function(zoomLevel){if(zoomLevel===this.map.getZoom()||zoomLevel===NaN||zoomLevel===undefined){return}this.map.setZoom(zoomLevel)},onUpdateStyle:function(stylers){if(stylers===undefined){return}this.map.setOptions({styles:stylers})},onUpdateSize:function(width,height){if(width===undefined||height===undefined){return}jQuery("#"+this.get("canvas")).width(width).height(height);google.maps.event.trigger(this.map,"resize")},onAddPlaces:function(place){if(place.get("rendered")===true){return}if(place.get("lat")===undefined||place.get("lng")===undefined){var center=this.map.getCenter();place.set("lat",center.lat());place.set("lng",center.lng())}place.set("rendered",true);this.attachToMap(place);this.bindPlaceOnMapEvents(place)},attachToMap:function(place){var map=this.map;var marker=new google.maps.Marker({position:new google.maps.LatLng(place.get("lat"),place.get("lng")),map:this.map,draggable:!this.get("readonly"),title:place.get("name")});var infowindow=this.getAssocoatedInfoView(place);google.maps.event.addListener(marker,"click",function(){infowindow.open(map,marker)});this.state.markers[place.get("id")]=marker;place.set("rendered",true);return marker},getAssocoatedInfoView:function(place){if(this.state.infowindows[place.get("id")]===undefined){this.state.infowindows[place.get("id")]=new google.maps.InfoWindow({content:place.get("details")})}return this.state.infowindows[place.get("id")]},bindPlaceOnMapEvents:function(place){var map=this.map;var marker=this.state.markers[place.get("id")];var channel=this.get("channel");google.maps.event.addListener(marker,"dragend",function(){var point=marker.getPosition();place.set("lat",point.lat());place.set("lng",point.lng())});google.maps.event.addListener(marker,"mousedown",function(){EventDistpatcher.use(channel).trigger("place.select",place)})},onUpdatePlace:function(place){var id=place.get("id");var placeMarker=this.state.markers[id];placeMarker.setTitle(place.get("name"));placeMarker.setIcon(place.get("icon"));var infowindow=this.state.infowindows[id];infowindow.setContent(place.get("details"))},onRemovePlace:function(place){var id=place.get("id");var marker=this.state.markers[id];if(marker!==undefined){marker.setMap(null)}}});var PlaceModel=Backbone.Model.extend({initialize:function(){var channel=this.get("channel");this.on("change:lat",function(model){if(model===undefined){return}var lat=model.get("lat");jQuery("#"+model.get("id")+" .lat").val(lat)});this.on("change:lng",function(model){if(model===undefined){return}var lat=model.get("lng");jQuery("#"+model.get("id")+" .lng").val(lat)});this.on("change:name",function(model){if(model===undefined){return}EventDistpatcher.use(channel).trigger("place.update",this)});this.on("change:details",function(model){if(model===undefined){return}EventDistpatcher.use(channel).trigger("place.update",this)})},toJSON:function(){return{name:this.get("name"),lat:this.get("lat"),lng:this.get("lng"),icon:this.get("icon"),iconCustomName:this.get("iconCustomName"),iconCustomId:this.get("iconCustomId"),details:this.get("details")}},validate:function(){var messages=[];var fields=[];if(!this.get("name")){messages.push("You must provide a name for place");fields.push("#"+this.get("id")+" .name")}if(!this.get("lat")||isNaN(this.get("lat"))){messages.push("Invalid place lat, must be a valid coordonate.");fields.push("#"+this.get("id")+" .lat")}if(!this.get("lng")||isNaN(this.get("lng"))){messages.push("Invalid place lng, must be a valid coordonate.");fields.push("#"+this.get("id")+" .lng")}if(messages.length!==0){fields.push(".header-"+this.get("id"))}return{messages:messages,fields:fields,hasError:messages.length!==0}}});var MapModel=Backbone.Model.extend({initialize:function(){this.on("change:name",function(model){if(model===undefined){return}var name=model.get("name");jQuery("#"+model.get("el")+" .name").val(name)});this.set("places",{});this.set("stylers",{})},toJSON:function(){return{id:this.get("id"),name:this.get("name"),lat:this.get("lat"),lng:this.get("lng"),zoom:this.get("zoom"),width:this.get("width"),height:this.get("height"),type:this.get("type"),places:this.collectionToJSON(this.get("places"))}},validate:function(){var messages=[];var fields=[];if(!this.get("name")){messages.push("You must provide a name for map");fields.push(".top .name")}if(!this.get("width")||isNaN(this.get("width"))){messages.push("Invalid map width, must be a number.");fields.push(".width")}if(!this.get("height")||isNaN(this.get("height"))){messages.push("Invalid map height, must be a number.");fields.push(".height")}if(!this.get("lat")||isNaN(this.get("lat"))){messages.push("Invalid map center lat, must be a valid coordonate.");fields.push(".lat")}if(!this.get("lng")||isNaN(this.get("lng"))){messages.push("Invalid map center lng, must be a valid coordonate.");fields.push(".lng")}if(!this.get("type")){messages.push("Invalid map type specified.");fields.push(".type")}var places=this.get("places");for(var key in places){var placeValidation=places[key].validate();if(placeValidation.hasError){messages=messages.concat(placeValidation.messages);fields=fields.concat(placeValidation.fields)}}return{messages:messages,fields:fields,hasError:messages.length!==0}},collectionToJSON:function(collection){var result=[];for(var key in collection){result.push(collection[key].toJSON())}return result},addPlace:function(key,placeModel){var places=this.get("places");places[key]=placeModel},removePlace:function(key){var places=this.get("places");delete places[key]},getPlaceById:function(key){var places=this.get("places");return places[key]},prepareModelState:function(data){var map=data.map.configuration;map.id=data.map.id;return map},load:function(data){var modelState=this.prepareModelState(data);for(var key in modelState){var value=modelState[key];if(Object.prototype.toString.call(value)==="[object Array]"){this.fillFromCollection(key,value)}else{this.set(key,value)}}},fillFromCollection:function(type,collection){this.set(type,{});for(var key in collection){var subModelState=collection[key];if(Object.prototype.toString.call(subModelState)!=="[object Object]"){continue}subModelState["channel"]=this.get("channel");var ident="ident"+Math.floor(Math.random()*1e5);switch(type){case"places":if(subModelState["details"]!==undefined){subModelState["details"]=subModelState["details"].replace(/\\/g,"")}var place=new PlaceModel(subModelState);place.set("id",ident);this.addPlace(ident,place);break}}}});var BaseView=Backbone.View.extend({getElId:function(){return this.$el.attr("id")},getChannel:function(){if(this.channel===undefined){this.channel="id"+Math.floor(Math.random()*1e5)}return this.channel}});var MapView=BaseView.extend({initialize:function(config){this.config=config;var channel=this.getChannel();EventDistpatcher.use(channel).on("map.load",this.onLoadMapCallback,this);this.initConnection(config.url.load);this.initModel();this.initMapManager()},initConnection:function(){var channel=this.getChannel();this.connectionManager=new ConnectionManager({channel:channel})},initModel:function(){this.model=new MapModel(this.getDefaultModelState())},getDefaultModelState:function(){var channel=this.getChannel();return{readonly:this.isReadOnly(),channel:channel}},initMapManager:function(){var configuration=this.getMapConfiguration();this.mapManager=new MapManager(configuration)},getMapConfiguration:function(){return{canvas:this.getElId(),readonly:this.isReadOnly(),channel:this.getChannel()}},getConfiguration:function(){return this.config},isReadOnly:function(){return true},loadModel:function(id){var instance=this;var channel=this.getChannel();EventDistpatcher.use(channel).trigger("backend.send",{content:{id:id},url:this.getLoadURL(),callback:{success:function(data){instance.model.load(data);EventDistpatcher.use(channel).trigger("map.load",instance.model)}}})},getLoadURL:function(){return this.getConfiguration().url.load},onLoadMapCallback:function(model){var channel=this.getChannel();var places=model.get("places");for(var key in places){EventDistpatcher.use(channel).trigger("place.add",places[key]);EventDistpatcher.use(channel).trigger("place.update",places[key])}if(this.isReadOnly()){EventDistpatcher.use(channel).trigger("map.updatesize",model.get("width"),model.get("height"))}EventDistpatcher.use(channel).trigger("map.updatezoom",parseInt(model.get("zoom")));EventDistpatcher.use(channel).trigger("map.updatecenter",model.get("lat"),model.get("lng"));EventDistpatcher.use(channel).trigger("map.updatetype",model.get("type"))}});